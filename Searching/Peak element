class Solution {

    public int peakElement(int[] arr) {
        // code here
        int low = 0;
        int high = arr.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            // Check if mid element is greater than its neighbors
            if ((mid == 0 || arr[mid] > arr[mid - 1]) && (mid == arr.length - 1 || arr[mid] > arr[mid + 1])) {
                return mid;
            }
            // If the left neighbor is greater, then peak must be in the left half
            else if (mid > 0 && arr[mid] < arr[mid - 1]) {
                high = mid - 1;
            }
            // If the right neighbor is greater, then peak must be in the right half
            else {
                low = mid + 1;
            }
        }
        
        return -1;
    }
    
    /*public int peakElement(int[] arr){
        int n = arr.length;
        
        if(n==1){
            return 1;
        }
        if(arr[0]>arr[1]){
            return 1;
        }
        if(arr[n-1]>arr[n-2]){
            return 1;
        }
        for(int i=1;i<n-1;i++){
            if(arr[i-1]<arr[i] && arr[i]>arr[i+1]){
                return 1;
            }
        }
        return 0;
    }*/
    
}
