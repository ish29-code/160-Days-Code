FOR EXAMPLE -----> txt = "abcab", pat = "ab"

HAVE TRIED BY THREE ALORITHMS (IN TWO IT DIDN'T SOLVED 5 TEST CASES BUT PASSES(1110/1115)
IN 1ST APPROACH ----> BY SUBSTRING METHOD-----> checking txt.substring(i,i+pat.length),,
then making an arraylist to store result of ----> result.add(i);----> (the index where txt substring matches with pat string and returns the first index of that substring)

IN SECOND APPROACH ------> making list to store, then loop i=0 to i=n-m, N=5,M=2---> i=0 to i<=3,
by boolean ismatch initiallize with true;
then loop in pat string ,, then checking if char at txt(i+j) is not match then false;
but if match add in list,

IN THIRD APPROACH -----> BY LPS[LONGEST PREFIX SUM]


/*class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        // your code here
        int m = pat.length();
        int n = txt.length();
        
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i=0;i<=n-m;i++){
            boolean match = true;
            for(int j=0;j<m;j++){
                if(txt.charAt(i+j)!=pat.charAt(j)){
                    match=false;
                    break;
                }
            }
            if(match){
                list.add(i);
            }
        }
        return list;
        
    }
}*/

class Solution{
    ArrayList<Integer> search(String pat,String txt){
        int m = pat.length();
        int n = txt.length();
        int lps[] = new int[m];
        ArrayList<Integer> res = new ArrayList<>();
        
        constructlps(pat,lps);
        int i=0,j=0;
        
        while(i<n){
            if(txt.charAt(i)==pat.charAt(j)){
                i++;
                j++;
                if(j==m){
                    res.add(i-j);
                    j=lps[j-1];
                }
            }
            else{
                if(j!=0){
                    j=lps[j-1];
                }
                else{
                    i++;
                }
            }
        }
        return res;
    }
    static void constructlps(String pat,int lps[]){
        int len=0;
        lps[0]=0;
        int i=1;
        while(i<pat.length()){
            if(pat.charAt(i)==pat.charAt(len)){
                len++;
                lps[i]=len;
                i++;
            }
            else{
                if(len !=0){
                    len = lps[len-1];
                }
                else{
                    lps[i]=0;
                    i++;
                }
            }
        }
    }
    
}

/*class Solution{
    ArrayList<Integer> serach(String pat,String txt){
        ArrayList<Integer> list = new ArrayList<>();
        int m = pat.length();
        int n = txt.length();
        
        for(int i=0;i<=n-m;i++){
            String sub = txt.substring(i,i+m);
            
            if(sub.equals(pat)){
                list.add(i);
            }
        }
        return list;
    }
}*/
