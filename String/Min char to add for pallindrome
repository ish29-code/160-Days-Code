/*we will do this by LPS[longest Prefix Sum] take example of 
->firstly, make a countLPs function to do operation for lps
->then make a lps[] array and at first initilize all as 0s,
->then loop of i<n, then conditions (if char at i matches char at len)then increment len if not just increment i

-> take example of ---> "abc"
->after reversing and concanating the string we get ( "abc#cba" )
then lps[0]=0 ---->[0,0,0,0,0,0]
then if matches increment len++; in this when len=0,i=6 a==a matches, then lps[6]=1 ------>[0,0,0,0,0,1]
then when return n-lps[concat_s.length()-1];-----> 3-1=2 ----> anss
*/

class Solution{
    static int[] countLPS(String s){
        int n = s.length();
        int lps[] = new int[n];
        lps[0]=0;
        int len=0;
        int i=1;
        
        while(i<n){
            if(s.charAt(i)==s.charAt(len)){
                len++;
                lps[i]=len;
                i++;
            }
            else{
                if(len!=0){
                    len=lps[len-1];
                }
                else{
                    i++;
                }
            }
        }
        return lps;
    }
    public static int minChar(String s){
        int n = s.length();
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        
        String rev_s = sb.toString();
        sb.reverse().append('#').append(rev_s);
        
        String concat_s = sb.toString();
        
        int lps[]=countLPS(concat_s);
        return n-lps[concat_s.length()-1];
    }
}
