class Solution {
    // Function to find hIndex
    public int hIndex(int[] citations) {
        // code here
        Arrays.sort(citation);//---->[0,0,3,3,5]
        for(int i=0;i<citation.length;i++){
            if(citation[i]>=n-i){
                return n-i;
            }
        }
    }
}

BY BINARY SEARCH

class Solution {
    public int hIndex(int[] citations) {

        if(citations.length==1){
            if(citations[0]==0) return 0;
            else return 1;
        }

        int low= 0;
        int high= citations.length-1;

        int n=citations.length;

        while(low<=high){

            int mid= low+ (high-low)/2;

            if(citations[mid]>= n-mid){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return n-low;
    }
}

ARR[] = [0, 1, 3, 5, 6]
First iteration (i = 0):
citations[0] = 0
n - i = 5 - 0 = 5
Condition: 0 >= 5 (False)
This means we can't have 5 papers with at least 0 citations.

Second iteration (i = 1):
citations[1] = 1
n - i = 5 - 1 = 4
Condition: 1 >= 4 (False)
This means we can't have 4 papers with at least 1 citation.

Third iteration (i = 2):
citations[2] = 3
n - i = 5 - 2 = 3
Condition: 3 >= 3 (True)
This means we have at least 3 papers with at least 3 citations.
So, H could be 3 here.

Fourth iteration (i = 3):
citations[3] = 5
n - i = 5 - 3 = 2
Condition: 5 >= 2 (True)
This means we have at least 2 papers with at least 5 citations.
But since H is maximum when the condition is first satisfied, we don't update H here.

Fifth iteration (i = 4):
citations[4] = 6
n - i = 5 - 4 = 1
Condition: 6 >= 1 (True)
This means we have at least 1 paper with at least 6 citations.
Again, H is maximum when the condition is first satisfied, so we don't update H here
